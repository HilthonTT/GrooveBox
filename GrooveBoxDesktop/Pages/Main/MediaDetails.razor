@page "/MediaDetails/{Id}"
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IVideoEndpoint videoEndpoint
@inject NavigationManager navManager

@if (media is not null)
{
   <div class="row p-1">
       <div class="col-xl-10 col-lg-12">
            <div class="row">
                <div class="close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
                <div class="col-12">
                    <div class="text-center">
                        <video controls height="600" width="900">
                            <source src="@GetVideoSource()" type="video/mp4">
                        </video>
                    </div>
                    <div class="card">
                        <div class="author">
                            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                alt="Author Profile Picture">
                            <span class="custom-pointer" @onclick="LoadAuthorPage">@media.Author.DisplayName</span>
                        </div>
                        <div class="like-button" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUserVotesText()</div>
                            <i class="oi oi-thumb-up"></i>
                           <div class="text-uppercase"> @GetUserVotesBottomText()</div>
                        </div>
                        <h1 class="title">@media.Title</h1>
                        <p class="description">@media.Description</p>
                    </div>
                </div>
            </div>
       </div>
   </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private MediaFileModel media;

    protected override async Task OnInitializedAsync()
    {
        media = await mediaFileEndpoint.GetMediaFileAsync(Id);
    }

    private async Task VoteUp()
    {
        if (string.IsNullOrWhiteSpace(loggedInUser.Id))
        {
            navManager.NavigateTo("/Login");
            return;
        }

        if (media.Author.Id == loggedInUser.Id)
        {
            // Can't vote your own media
            return;
        }

        if (media.UserVotes.Add(loggedInUser.Id) is false)
        {
            media.UserVotes.Remove(loggedInUser.Id);
        }

        await mediaFileEndpoint.UpdateVoteMediaFileAsync(media.Id, loggedInUser.Id);
    }

    private async Task<string> GetVideoSource()
    {
        string source = await videoEndpoint.GetVideoUrlAsync(media.FilePath);
        if (string.IsNullOrWhiteSpace(source) is false)
        {
            return source;
        }

        return "";
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadAuthorPage()
    {
        navManager.NavigateTo($"/UserDetails/{media.Author.Id}");
    }

    private string GetVoteClass()
    {
        if (media.UserVotes is null || media.UserVotes.Count == 0)
        {
            return "bg-success";
        }

        if (media.UserVotes.Contains(loggedInUser.Id))
        {
            return "bg-danger";
        }

        return "bg-success";
    }

    private string GetUserVotesText()
    {
        if (media.UserVotes?.Count > 0)
        {
            return media.UserVotes.Count.ToString("00");
        }

        if (media.UserVotes?.Count == 0)
        {
            return "0";
        }

        return "N/A";
    }

    private string GetUserVotesBottomText()
    {
        if (media.UserVotes.Count > 1)
        {
            return "Upvotes";
        }

        return "Upvote";
    }
}
