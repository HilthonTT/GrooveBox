@page "/MediaDetails/{Id}"
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IVideoEndpoint videoEndpoint
@inject NavigationManager navManager

@if (media is not null)
{
   <div class="row p-1">
       <div class="col-xl-10 col-lg-12">
            <div class="row">
                <div class="close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
                <div class="col-12">
                    @if (string.IsNullOrWhiteSpace(videoSource) is false)
                    {
                        <div class="text-center">
                            <video controls height="600" width="900">
                                <source src="@videoSource" type="video/mp4">
                            </video>
                        </div>
                    }
                    <div class="card mb-2">
                        <div class="author">
                            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                alt="Author Profile Picture">
                            <span class="custom-pointer" @onclick="LoadAuthorPage">@media.Author.DisplayName</span>
                        </div>
                        <div class="like-button" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUserVotesText()</div>
                            <i class="oi @GetVoteClass()"></i>
                           <div class="text-uppercase"> @GetUserVotesBottomText()</div>
                        </div>
                        <button class="btn @GetVoteClass()" @onclick="VoteUp">
                            @GetUserVotesText()<i class="oi oi-thumb-up mx-1"></i>
                        </button>
                        <h1 class="title">@media.Title</h1>
                        <p class="description">@media.Description</p>
                    </div>
                </div>
            </div>
       </div>
   </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private MediaFileModel media;
    private string videoSource;
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        media = await mediaFileEndpoint.GetMediaFileAsync(Id);
        videoSource = await GetVideoSource();
    }

    private async Task<string> GetVideoSource()
    {
        string source = await videoEndpoint.GetVideoUrlAsync(media.FilePath);
        if (string.IsNullOrWhiteSpace(source) is false)
        {
            return source;
        }

        return "";
    }

    private async Task VoteUp()
    {
        if (isBusy)
        {
            return;
        }

        isBusy = true;
        if (string.IsNullOrWhiteSpace(loggedInUser.Id))
        {
            navManager.NavigateTo("/Login");
            return;
        }

        if (media.UserVotes.Add(loggedInUser.Id) is false)
        {
            media.UserVotes.Remove(loggedInUser.Id);
        }

        await mediaFileEndpoint.UpdateVoteMediaFileAsync(media.Id, loggedInUser.Id);
        isBusy = false;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadAuthorPage()
    {
        navManager.NavigateTo($"/Profile/{media.Author.Id}");
    }

    private string GetVoteClass()
    {
        if (media.UserVotes is null || media.UserVotes.Count == 0)
        {
            return "oi-thumb-up text-success";
        }

        if (media.UserVotes.Contains(loggedInUser.Id))
        {
            return "oi-thumb-down text-danger";
        }

        return "oi-thumb-up text-success";
    }

    private string GetLikeDislikeClass(bool isLike)
    {
        if (media.UserVotes.Contains(loggedInUser?.Id) == isLike)
        {
            return "btn-secondary";
        }

        return "btn-outline-secondary";
    }

    private string GetUserVotesText()
    {
        if (media.UserVotes?.Count > 0)
        {
            return media.UserVotes.Count.ToString("00");
        }

        if (media.UserVotes?.Count == 0)
        {
            return "0";
        }

        return "N/A";
    }

    private string GetUserVotesBottomText()
    {
        if (media.UserVotes.Count > 1)
        {
            return "Upvotes";
        }

        return "Upvote";
    }
}
