@page "/"
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IGenreEndpoint genreEndpoint
@inject IFileStorage fileStorage
@inject ISecureStorageWrapper secureStorage
@inject IJSRuntime JSInterop
@inject NavigationManager navManager

<h1 class="page-heading mb-2">Discover</h1>

<div class="row">
    <div class="col-12">
        <div class="input-group mb-3">
          <input @oninput="((txt) => OnSearchInput((string)txt.Value))" @bind-value="searchText"
                type="text" class="form-control" placeholder="Search" 
                aria-label="Search" aria-describedby="search-button"/>
          <button class="btn btn-outline-secondary" type="button" 
                  id="search-button" @onclick="LoadResults">
              Search
          </button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">    
        <div class="row">
            @if (mediaFiles is not null && genres is not null)
            {
                <Virtualize Items="genres" Context="g" OverscanCount="10">
                    <div class="col-12 d-flex justify-content-between">
                        <h3 class="page-heading mb-2 custom-pointer d-inline-block width-auto text-decoration-underline" 
                            @onclick="(() => LoadGenreMedia(g))">
                            @g.GenreName
                        </h3>
                        <a href="#" class="link-dark text-decoration-none" @onclick="(() => LoadGenreMedia(g))">
                            See All &#8594;
                        </a>
                    </div>
                    <Virtualize Items="GetGenreMedias(g)" Context="m" OverscanCount="10">
                        <MediaComponent @key="m.Id" Media="m"/>
                    </Virtualize>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    private List<MediaFileModel> mediaFiles;
    private List<GenreModel> genres;
    private string searchText = "";
    private string selectedGenre = "All";

    protected override async Task OnInitializedAsync()
    {
        mediaFiles = await mediaFileEndpoint.GetAllAsync();
        genres = await genreEndpoint.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSInterop.InvokeVoidAsync("initializeTooltips");
            await LoadFilterState();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = await secureStorage.GetAsync(nameof(searchText)) ?? "";
    }

    private async Task SaveFilterState()
    {
        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
             await secureStorage.SetAsync(nameof(searchText), searchText);
        }
    }

    private void LoadResults()
    {
        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            navManager.NavigateTo($"/results/{searchText}");
        }
        else
        {
            navManager.NavigateTo($"/");
        }
    }

    private void LoadGenreMedia(GenreModel genre)
    {
        navManager.NavigateTo($"/Genre/{genre.GenreName}");
    }

    private string GetSelectedGenreClass(string genre)
    {
        if (selectedGenre == genre)
        {
            return "bg-white";
        }

        return "";
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await SaveFilterState();
    }

    private List<MediaFileModel> GetGenreMedias(GenreModel genre)
    {
        var random = new Random();
        return mediaFiles.Where(m => m.Genre?.Id == genre.Id)
            .OrderBy(m => random.Next())
            .Take(3).ToList();
    }
}
