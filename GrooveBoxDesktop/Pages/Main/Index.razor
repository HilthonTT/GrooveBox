@page "/"
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileData mediaFileData
@inject IGenreData genreData
@inject IFileStorage fileStorage
@inject ISecureStorageWrapper secureStorage
@inject IJSRuntime JSInterop
@inject NavigationManager navManager

<h1 class="page-heading mb-2">Discover</h1>

<div class="row">
    <div class="col-12">
        <div class="input-group mb-3">
          <input @bind-value="searchText" 
                type="text" class="form-control" placeholder="Search" 
                aria-label="Search" aria-describedby="search-button"/>
          <button class="btn btn-outline-secondary" type="button" id="search-button" @onclick="LoadResults">
              Search
          </button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">    
        <div class="row">
            @if (mediaFiles is not null && genres is not null)
            {
                <Virtualize Items="genres" Context="g" OverscanCount="10">
                    <div class="col-12 d-flex justify-content-between">
                        <h3 class="page-heading mb-2 custom-pointer d-inline-block width-auto" 
                            @onclick="(() => LoadGenreMedia(g))">
                            @g.GenreName
                        </h3>
                        <a href="#" class="link-dark text-decoration-none" @onclick="(() => LoadGenreMedia(g))">
                            See All &#8594;
                        </a>
                    </div>
                    <Virtualize Items="GetGenreMedias(g)" Context="m" OverscanCount="10">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-2 m-1" @onclick="(() => LoadMediaPage(m))">
                            <div class="row">
                                <div class="col-12">
                                    <div class="card custom-pointer" style="width: 12rem;">
                                        <div class="overlay-container">
                                            @if (string.IsNullOrWhiteSpace(m.ThumbnailPath) is false)
                                            {
                                                <div class="text-center">
                                                    <img src="@CreateSourcePath(m.ThumbnailPath)" 
                                                     class="card-img-top image-with-shadow rounded"
                                                     style="width: 150px; height: 150px;"/>
                                                </div>
                                            }
                                            else
                                            {
                                                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                                     class="card-img-top image-with-shadow rounded" 
                                                     alt="No Image Available" />
                                            }
                                            <div class="overlay"></div>
                                        </div>
                                        <div class="card-body">
                                            <h6 class="card-title truncated-title text-break" 
                                                data-fulltitle="@m.Title">
                                                @GetTitleText(m)
                                            </h6>
                                            <p class="card-text">
                                                <span class="oi oi-thumb-up"></span>
                                                @GetUserVotesText(m)
                                            </p>
                                            <p class="card-text">
                                                Made by: @m.Author.DisplayName
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Virtualize>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    private List<MediaFileModel> mediaFiles;
    private List<GenreModel> genres;
    private string searchText = "";
    private string selectedGenre = "All";

    protected override async Task OnInitializedAsync()
    {
        mediaFiles = await mediaFileData.GetAllMediaFilesAsync();
        genres = await genreData.GetAllGenresAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSInterop.InvokeVoidAsync("initializeTooltips");
            StateHasChanged();
        }
    }

    private void LoadResults()
    {
        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            navManager.NavigateTo($"/results/{searchText}");
        }
        else
        {
            navManager.NavigateTo($"/");
        }
    }

    private void LoadMediaPage(MediaFileModel media)
    {
        navManager.NavigateTo($"MediaDetails/{media.Id}");
    }

    private void LoadGenreMedia(GenreModel genre)
    {
        navManager.NavigateTo($"/{genre.GenreName}");
    }

    private string GetTitleText(MediaFileModel media)
    {
        return media.Title.Length > 30 ? $"{media.Title.Substring(0, 30)}..." : media.Title;
    }

    private string GetUserVotesText(MediaFileModel media)
    {
        if (media.UserVotes?.Count > 0)
        {
            return media.UserVotes.Count.ToString("00");
        }

        if (media.UserVotes?.Count == 0)
        {
            return "0";
        }

        return "N/A";
    }

    private string GetSelectedGenreClass(string genre)
    {
        if (selectedGenre == genre)
        {
            return "bg-white";
        }

        return "";
    }

    private string CreateSourcePath(string fileId)
    {
        return fileStorage.CreateSourcePathImage(fileId);
    }

    private List<MediaFileModel> GetGenreMedias(GenreModel genre)
    {
        var random = new Random();
        return mediaFiles.Where(m => m.Genre?.Id == genre.Id)
            .OrderBy(m => random.Next())
            .Take(5).ToList();
    }
}
