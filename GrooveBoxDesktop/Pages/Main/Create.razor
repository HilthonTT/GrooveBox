@page "/Create"
@using GrooveBoxLibrary.DataAccess;
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IGenreEndpoint genreEndpoint
@inject IFileStorage fileStorage
@inject IJSRuntime JSInterop
@inject NavigationManager navManager
@attribute [Authorize]

<h1 class="page-heading mb-2">Upload your media</h1>

@if (isUploading)
{
    <div class="alert alert-warning" role="alert">
        Remain patient, we are uploading your media! Do not leave the page.
    </div>
}

<EditForm Model="media" OnValidSubmit="CreateMedia">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-12">
            <div class="row">
                <div class="col-4">
                    @if (string.IsNullOrWhiteSpace(thumbnailPath))
                    {
                        <img id="image-container" src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                        class="img-fluid rounded mx-auto d-block mb-2" alt="Stock Image" />
                    }
                    else
                    {
                         <img id="image-container" src="@thumbnailPath" 
                            class="img-fluid rounded mx-auto d-block mb-2" alt="Selected Image" />
                    }
                    <InputFile OnChange="LoadThumbnailFile" class="form-control" accept="image/*"/>
                </div>
                <div class="col-8">
                    <div class="mb-3">
                        <label for="media-title" class="form-label">Title</label>
                        <div id="title-help" class="form-text">How would you like to name your media?</div>
                        <InputText class="form-control" id="media-title" 
                        aria-describedby="title-help" @bind-Value="media.Title" />
                    </div>
                    <div class="mb-3">
                        <label for="media-description" class="form-label">Description</label>
                        <div id="description-help" class="form-text">Describe your media, what does it contain?</div>
                        <InputTextArea class="form-control" id="media-description" 
                        aria-describedby="description-help" @bind-Value="media.Description"/>
                    </div>
                    <div class="mb-3">
                        <label for="media-file" class="form-label">Choose your file to upload.</label>
                        <div id="file-help" class="form-text">Select the file you would like to upload.</div>
                        <InputFile OnChange="LoadMediaFile" class="form-control" 
                        accept="audio/*,video/*,.mkv"/>
                    </div>
                    <div class="mb-3">
                        <label for="media-genre" class="form-label">Genres</label>
                        <div id="genre-help" class="form-text">Select a genre which best suits your media.</div>
                        @if (genres is not null)
                        {
                            <InputSelect class="form-select" aria-describedby="genre-help" @bind-Value="media.GenreId">
                                @foreach (var g in genres)
                                {
                                    <option value="@g.Id">@g.GenreName</option>
                                }
                            </InputSelect>
                        }
                    </div>
                    <div class="center-children">
                        <button type="submit" class="btn btn-primary">
                            Upload
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private CreateMediaFileModel media = new();
    private List<GenreModel> genres;
    private string thumbnailPath = "";
    private long maxFileSizeThumbnail = 1024 * 1024 * 5; // represents 5MB
    private long maxFileSizeMedia = 1024 * 1024 * 1000; // represents 1000MB
    private IBrowserFile thumbnailFile;
    private IBrowserFile mediaFile;
    private bool isUploading = false;

    protected override async Task OnInitializedAsync()
    {
        genres = await genreEndpoint.GetAllAsync();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task LoadThumbnailFile(InputFileChangeEventArgs e)
    {
        thumbnailFile = e.File;
        using var stream = thumbnailFile.OpenReadStream(maxFileSizeThumbnail);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        string base64Image = $"data:{thumbnailFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
        thumbnailPath = base64Image;
    }

    private void LoadMediaFile(InputFileChangeEventArgs e)
    {
        mediaFile = e.File;
    }

    private async Task CreateMedia()
    {
        isUploading = true;
        if (mediaFile is null || mediaFile?.Size > maxFileSizeMedia || thumbnailFile?.Size > maxFileSizeThumbnail)
        {
            // Handle null or oversized thumbnail file
            return;
        }

        using Stream thumbnailStream = thumbnailFile.OpenReadStream(maxFileSizeThumbnail);
        var thumbnailFileId = await fileStorage.StoreFileAsync(thumbnailStream, thumbnailFile.Name);

        if (thumbnailFile is null)
        {
            thumbnailStream.Dispose();
            return;
        }

        using Stream mediaStream = mediaFile.OpenReadStream(maxFileSizeMedia);
        var mediaFileId = await fileStorage.StoreFileAsync(mediaStream, mediaFile.Name);
        
        await mediaStream.DisposeAsync();
        await thumbnailStream.DisposeAsync();

        MediaFileModel m = new()
        {
            Title = media.Title,
            Description = media.Description,
            ThumbnailPath = thumbnailFileId.ToString(),
            FilePath = mediaFileId.ToString(),
            Genre = genres.FirstOrDefault(g => g.Id == media.GenreId),
            Author = new BasicUserModel(loggedInUser),
        };

        if (m.Genre is null)
        {
            media.GenreId = "";
            return;
        }

        await mediaFileEndpoint.CreateMediaFileAsync(m);
        media = new();
        ClosePage();
        isUploading = false;  
    }
}
