@page "/Profile/{Id}"
@attribute [Authorize]
@inject IUserEndpoint userEndpoint
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IFileStorage fileStorage
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12 card">
        <div class="row">
            <div class="close-button-section">
                <button class="btn btn-close" @onclick="ClosePage" />
            </div>
            @if (user is not null)
            {
                <div class="p-1">
                    @if (string.IsNullOrWhiteSpace(sourcePath) is false)
                    {
                        <div class="text-center p-3">
                            <img src="@sourcePath" 
                                class="card-img-top rounded-circle" 
                                alt="@user.FileName"
                                style="width: 200px; height: 200px;">
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-3">
                            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                class="card-img-top rounded-circle" 
                                alt="Placeholder Image"
                                style="width: 200px; height: 200px;">
                        </div>
                    }
                </div>
                <div class="card-body text-center">
                    <h4 class="card-title">@user.DisplayName</h4>
                    <p class="text-muted">
                        <span class="mx-2">
                            @user.UserSubscriptions.Count subscribers
                        </span>
                        <span>
                            @user.AuthoredFiles.Count medias
                        </span>
                    </p>
                    @if (user.Id != loggedInUser?.Id)
                    {
                        <button class="btn btn-secondary" @onclick="Subscribe">
                            @GetSubscribeClass()
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-secondary w-100" @onclick="LoadEditProfilePage">
                            Edit Profile
                        </button>
                    }
                </div>
            }
        </div>
        <div class="row mt-3">
            <hr />
            <h5 class="page-heading mb-2">Medias</h5>
            @if (mediaFiles is not null)
            {
                <Virtualize Items="mediaFiles" Context="m" OverscanCount="10">
                    <MediaComponent @key="m.Id" Media="m"/>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private bool isBusy = false;
    private string sourcePath;
    private UserModel user;
    private List<MediaFileModel> mediaFiles;

    protected override async Task OnInitializedAsync()
    {
        user = await userEndpoint.GetByIdAsync(Id);
        if (user is not null)
        {
            mediaFiles = await mediaFileEndpoint.GetUserMediaFilesAsync(user.Id);
            sourcePath = await fileStorage.CreateSourcePath(user.FileName);
        }
    }

    private async Task Subscribe()
    {
        if (isBusy || user is null)
        {
            return;
        }

        isBusy = true;

        if (user.UserSubscriptions.Add(loggedInUser.Id) is false)
        {
            user.UserSubscriptions.Remove(loggedInUser.Id);
        }

        await userEndpoint.UpdateUserSubscriptionAsync(user.Id, loggedInUser.Id);
        isBusy = false;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadEditProfilePage()
    {
        navManager.NavigateTo("/EditProfile");
    }

    private string GetSubscribeClass()
    {
        if (user.UserSubscriptions is null || user.UserSubscriptions.Count == 0)
        {
            return "Subscribe";
        }

        if (user.UserSubscriptions.Contains(loggedInUser.Id))
        {
            return "Unsubscribe";
        }

        return "Subscribe";
    }
}
