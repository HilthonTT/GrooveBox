@page "/Profile/{Id}"
@attribute [Authorize]
@inject IUserEndpoint userEndpoint
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IFileStorage fileStorage
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12">
        <div class="row">
            <MatCard Class="w-100">
                <MatCardContent>
                    @if (string.IsNullOrWhiteSpace(sourcePath))
                    {
                        <MatCardMedia Wide="true" ImageUrl="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available."/>
                    }
                    else
                    {
                        <MatCardMedia Wide="true" ImageUrl="@sourcePath"/>
                    }
                    <div class="demo-mat-card-content">
                        <MatHeadline6 class="demo-mat-card-clean-margin">
                            @user?.DisplayName
                        </MatHeadline6>
                        <MatSubtitle2 class="demo-mat-card-clean-margin">
                            @user?.FirstName @user?.LastName
                            <MatDivider />
                            You've published @user?.AuthoredFiles.Count medias.
                        </MatSubtitle2>
                    </div>
                    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                        <MatCardActionButtons>
                            @if (loggedInUser.Id != user?.Id)
                            {
                                <MatButton Class="@GetSubscribeColor()" @onclick="Subscribe">Subscribe</MatButton>
                            }
                            else
                            {
                                <MatButton @onclick="LoadEditProfilePage">Edit Profile</MatButton>
                            }
                        </MatCardActionButtons>
                    </MatBody2>
                </MatCardContent>
            </MatCard>
        </div>
        <div class="row mt-3">
            <h5 class="page-heading mb-2">Medias</h5>
            @if (mediaFiles is not null)
            {
                <Virtualize Items="mediaFiles" Context="m" OverscanCount="10">
                    <MediaComponent @key="m.Id" Media="m"/>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private bool isBusy = false;
    private string sourcePath;
    private UserModel user;
    private List<MediaFileModel> mediaFiles;

    protected override async Task OnInitializedAsync()
    {
        user = await userEndpoint.GetByObjectIdAsync(Id);
        if (user is not null)
        {
            mediaFiles = await mediaFileEndpoint.GetUserMediaFilesAsync(user.Id);
            sourcePath = await fileStorage.CreateSourcePath(user.FileName);
        }
    }

    private async Task Subscribe()
    {
        if (isBusy || user is null)
        {
            return;
        }

        isBusy = true;

        if (user.UserSubscriptions.Add(loggedInUser.Id) is false)
        {
            user.UserSubscriptions.Remove(loggedInUser.Id);
        }

        await userEndpoint.UpdateUserSubscriptionAsync(user.Id, loggedInUser.Id);
        isBusy = false;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadEditProfilePage()
    {
        navManager.NavigateTo("/EditProfile");
    }


     private string GetSubscribeColor()
     {
        if (user is not null && user.UserSubscriptions.Contains(loggedInUser.Id))
        {
            return "text-danger";
        }

        return "text-success";
    }
}
