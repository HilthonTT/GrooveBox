@page "/EditProfile"
@attribute [Authorize]
@inject IUserEndpoint userEndpoint
@inject ILoggedInUserModel loggedInUser
@inject IFileStorage fileStorage
@inject NavigationManager navManager

<h1 class="page-heading mb-2">Edit Profile</h1>

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12 m-2">
        <MatCard Class="w-100">
            <MatCardContent>
                @if (string.IsNullOrWhiteSpace(sourcePath))
                {
                    <MatCardMedia 
                        Wide="true"
                        ImageUrl="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available."/>
                }
                else
                {
                    <MatCardMedia 
                        Wide="true" 
                        ImageUrl="@sourcePath"/>
                }
                <div class="demo-mat-card-content">
                    <MatHeadline6 class="demo-mat-card-clean-margin">
                        @loggedInUser?.DisplayName
                    </MatHeadline6>
                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                        @loggedInUser?.FirstName @loggedInUser?.LastName
                        <MatDivider />
                        You've published @loggedInUser?.AuthoredFiles.Count medias.
                    </MatSubtitle2>
                </div>
                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                    <MatCardActionButtons>
                        <MatButton @onclick="(() => isProfileDialogOpen = true)">Edit Profile Picture</MatButton>
                        <MatButton @onclick="(() => isDataDialogOpen = true)">Edit Data</MatButton>
                        <MatButton @onclick="(() => isEmailDialogOpen = true)">Change Email</MatButton>
                        <MatButton @onclick="(() => isPasswordDialogOpen = true)">Change Password</MatButton>
                    </MatCardActionButtons>
                </MatBody2>
            </MatCardContent>
        </MatCard>
    </div>
</div>

<MatDialog @bind-IsOpen="isProfileDialogOpen">
    <MatDialogTitle>Edit your profile picture.</MatDialogTitle>
    <MatDialogContent>
        <div class="text-center p-3">
            @if (string.IsNullOrWhiteSpace(sourcePath))
            {
            
                <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                    class="card-img-top rounded-circle" 
                    alt="Placeholder Image"
                    style="width: 200px; height: 200px;">
            
            }
            else
            {
                <img src="@sourcePath" 
                    class="card-img-top rounded-circle"
                    alt="@loggedInUser?.FileName"
                    style="width: 200px; height: 200px;">
            }
        </div>
        <div class="mt-2">
            <label class="form-label fw-bold text-uppercase" for="profile-picture">Profile Picture</label>
            <div class="mt-1">Select an image for your profile picture</div>
            <InputFile OnChange="LoadFile" class="form-control mt-3" accept="image/*"/>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@UpdateProfilePicture">Save</MatButton>
        <MatButton Type="button" OnClick="(() => isProfileDialogOpen = false)">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="isDataDialogOpen">
   <EditForm Model="user" OnValidSubmit="UpdateData">
        <MatDialogTitle>Edit your information.</MatDialogTitle>
        <MatDialogContent>
            <div class="mb-3">
                <MatStringField @bind-Value="user.FirstName" Label="First Name" 
                    Required="true" Type="text" FullWidth="true"
                    HelperText="Change your first name with your new one." HelperTextPersistent="true"/>
            </div>
            <div class="mb-3">
                <MatStringField @bind-Value="user.LastName" Label="Last Name"
                    Required="true" Type="text" FullWidth="true"
                    HelperText="Change your last name with your new one." HelperTextPersistent="true"/>
            </div>
            <div class="mb-3">
                <MatStringField @bind-Value="user.DisplayName" Label="Display Name"
                    Required="true" Type="text" FullWidth="true"
                    HelperText="Change your display name with your new one." HelperTextPersistent="true"/>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="submit">Save</MatButton>
            <MatButton Type="button" OnClick="(() => isDataDialogOpen = false)">Cancel</MatButton>
        </MatDialogActions>
   </EditForm>
</MatDialog>

<MatDialog @bind-IsOpen="isEmailDialogOpen">
   <EditForm Model="email" OnValidSubmit="UpdateEmailRequest">
       <DataAnnotationsValidator />
       <ValidationSummary />
        <MatDialogTitle>Edit your email address.</MatDialogTitle>
        <MatDialogContent>
            <div class="mb-3">
                <MatStringField @bind-Value="email.NewEmail" Label="New Email Address" 
                    Required="true" Type="text" FullWidth="true"
                    HelperText="Change your email with your new one." HelperTextPersistent="true"/>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="submit">Request</MatButton>
            <MatButton Type="button" OnClick="(() => isEmailDialogOpen = false)">Cancel</MatButton>
        </MatDialogActions>
   </EditForm>
</MatDialog>

<MatDialog @bind-IsOpen="isPasswordDialogOpen">
   <EditForm Model="password" OnValidSubmit="UpdatePasswordRequest">
       <DataAnnotationsValidator />
       <ValidationSummary />
        <MatDialogTitle>Edit your password.</MatDialogTitle>
        <MatDialogContent>
            <div class="mb-3">
                <MatStringField @bind-Value="password.Password" Label="New Password" 
                    Required="true" Type="text" FullWidth="true"
                    HelperText="Change your password with your new one." HelperTextPersistent="true"/>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="submit">Request</MatButton>
            <MatButton Type="button" OnClick="(() => isPasswordDialogOpen = false)">Cancel</MatButton>
        </MatDialogActions>
   </EditForm>
</MatDialog>

@code {
    private EditUserModel user = new();
    private EditEmailModel email = new();
    private EditPasswordModel password = new();
    private bool isProfileDialogOpen = false;
    private bool isDataDialogOpen = false;
    private bool isEmailDialogOpen = false;
    private bool isPasswordDialogOpen = false;
    private long maxFileSize = 1024 * 1024 * 5; // represents 5MB
    private IBrowserFile file;
    private string sourcePath;

    protected override async Task OnInitializedAsync()
    {
        sourcePath = await fileStorage.CreateSourcePath(loggedInUser?.FileName);
        user.FirstName = loggedInUser.FirstName;
        user.LastName = loggedInUser.LastName;
        user.DisplayName = loggedInUser.DisplayName;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
        using var stream = file.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        string base64Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(bytes)}";
        sourcePath = base64Image;
    }

    private async Task UpdateData()
    {
        loggedInUser.FirstName = user.FirstName;
        loggedInUser.LastName = user.LastName;
        loggedInUser.DisplayName = user.DisplayName;
        var u = MapUser();
        await userEndpoint.UpdateUserAsync(u);
        isDataDialogOpen = false;
    }

    private async Task UpdateEmailRequest()
    {
        loggedInUser.EmailAddress = email.NewEmail;
        await userEndpoint.ResetEmailAsync(loggedInUser.ObjectIdentifier, loggedInUser.EmailAddress);
        isEmailDialogOpen = false;
    }

    private async Task UpdatePasswordRequest()
    {
        await userEndpoint.ForgotPasswordAsync(loggedInUser.Token, loggedInUser.EmailAddress, password.Password);
        isPasswordDialogOpen = false;
    }

    private async Task UpdateProfilePicture()
    {
        if (file is null)
        {
            isProfileDialogOpen = false;
            return;
        }

        using Stream fileStream = file.OpenReadStream(maxFileSize);
        var fileId = await fileStorage.StoreFileAsync(fileStream, file.Name);
        await fileStream.DisposeAsync();

        var u = MapUser();
        u.FileName = fileId.ToString();

        await userEndpoint.UpdateUserAsync(u);
        file = null;
        isProfileDialogOpen = false;
    }

    private UserModel MapUser()
    {
        return new UserModel(loggedInUser);
    }
}
