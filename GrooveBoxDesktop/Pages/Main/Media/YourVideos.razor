@page "/YourVideos"
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IGenreEndpoint genreEndpoint
@inject ISecureStorageWrapper secureStorage
@inject NavigationManager navManager

<h1 class="page-heading">My Videos</h1>

<div class="row">
    <div class="text-uppercase fw-bold">Uploaded @medias?.Count medias</div>
    <div class="col-12">
        <div class="input-group">
            <MatStringField Label="Search" HelperText="Search your media with your title and description." 
                FullWidth="true" @oninput="((txt) => OnSearchInput((string)txt.Value))" @bind-value="searchText"/>
            <MatButton Raised Class="bg-secondary w-100 mt-2" Type="button" @onclick="LoadResults">
                Search
            </MatButton>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        @if (medias is not null)
        {
            <Virtualize Items="medias" Context="m" OverscanCount="10">
                <MediaComponent @key="m.Id" Media="m"/>
            </Virtualize>
        }
    </div>
</div>

@code {
    private List<MediaFileModel> medias;
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        medias = await mediaFileEndpoint.GetUserMediaFilesAsync(loggedInUser.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FilterMedias();
            StateHasChanged();
        }
    }

    private async Task FilterMedias()
    {
        var output = await mediaFileEndpoint.GetUserMediaFilesAsync(loggedInUser.Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(m => m.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                m.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        medias = output;
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterMedias();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadMediaPage(MediaFileModel media)
    {
        navManager.NavigateTo($"/MediaDetails/{media.Id}");
    }

   private void LoadResults()
   {
        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            navManager.NavigateTo($"/results/{searchText}");
        }
        else
        {
            navManager.NavigateTo($"/");
        }
   }
}
