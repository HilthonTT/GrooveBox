@page "/MediaDetails/{Id}"
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IVideoEndpoint videoEndpoint
@inject IUserEndpoint userEndpoint
@inject NavigationManager navManager

@if (media is not null)
{
    <MatCard Class="mb-4">
        <MatCardContent>
            <div class="close-button-section">
                <button class="btn btn-close" @onclick="ClosePage"></button>
            </div>
            @if (string.IsNullOrWhiteSpace(videoSource) is false)
            {
                <div class="text-center">
                    <video controls height="800" width="1000">
                        <source src="@videoSource" type="video/mp4">
                    </video>
                </div>
            }
            <div class="demo-mat-card-content">
                <MatHeadline6 class="demo-mat-card-clean-margin">
                    @media.Title
                </MatHeadline6>
                <MatSubtitle2 class="demo-mat-card-clean-margin custom-pointer" @onclick="LoadAuthorPage">
                    by @media.Author.DisplayName
                    <MatDivider />
                    Uploaded the @media.DateCreated.ToString("mm/dd/yyyy")
                </MatSubtitle2>
            </div>
            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                @media.Description
            </MatBody2>
        </MatCardContent>
        <MatCardActions>
            <MatCardActionButtons>
                @if (loggedInUser.Id != media.Author.Id)
                {
                    <MatButton Class="@GetSubscribeColor()" @onclick="Subscribe">Subscribe</MatButton>
                }
                else
                {
                    <MatButton @onclick="LoadEditPage">Edit</MatButton>
                }
            </MatCardActionButtons>
            <MatCardActionIcons>
                <MatIconButton Class="@GetVoteColor()" Icon="@MatIconNames.Favorite" @onclick="VoteUp"></MatIconButton>
                <MatIconButton Icon="@MatIconNames.Dashboard"></MatIconButton>
            </MatCardActionIcons>
        </MatCardActions>
    </MatCard>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private MediaFileModel media;
    private UserModel author;
    private string videoSource;
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        media = await mediaFileEndpoint.GetMediaFileAsync(Id);
        videoSource = await GetVideoSource();
        if (media is not null)
        {
             author = await userEndpoint.GetByObjectIdAsync(media.Author.ObjectIdentifier);
        }
    }

    private async Task<string> GetVideoSource()
    {
        string source = await videoEndpoint.GetVideoUrlAsync(media.FilePath);
        if (string.IsNullOrWhiteSpace(source) is false)
        {
            return source;
        }

        return "";
    }

    private async Task Subscribe()
    {
        if (isBusy || author is null || author.Id == loggedInUser.Id)
        {
            return;
        }

        isBusy = true;

        if (author.UserSubscriptions.Add(loggedInUser.Id) is false)
        {
            author.UserSubscriptions.Remove(loggedInUser.Id);
        }

        await userEndpoint.UpdateUserSubscriptionAsync(author.Id, loggedInUser.Id);
        isBusy = false;
    }

    private async Task VoteUp()
    {
        if (isBusy)
        {
            return;
        }

        isBusy = true;
        if (string.IsNullOrWhiteSpace(loggedInUser.Id))
        {
            navManager.NavigateTo("/Login");
            return;
        }

        if (media.UserVotes.Add(loggedInUser.Id) is false)
        {
            media.UserVotes.Remove(loggedInUser.Id);
        }

        await mediaFileEndpoint.UpdateVoteMediaFileAsync(media.Id, loggedInUser.Id);
        isBusy = false;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadAuthorPage()
    {
        navManager.NavigateTo($"/Profile/{media.Author.Id}");
    }

    private void LoadEditPage()
    {
        navManager.NavigateTo($"/MediaEdit/{media.Id}");
    }

    private string GetSubscribeColor()
    {
        if (author is not null && author.UserSubscriptions.Contains(loggedInUser.Id))
        {
            return "text-danger";
        }

        return "text-success";
    }

    private string GetVoteColor()
    {
        if (media.UserVotes.Contains(loggedInUser.Id))
        {
            return "text-success";
        }

        return "";
    }
}
