@page "/Create"
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IGenreEndpoint genreEndpoint
@inject IFileStorage fileStorage
@inject IFileProcessor fileProcessor
@inject IJSRuntime JSInterop
@inject IMatDialogService matDialogService
@inject NavigationManager navManager

<h1 class="page-heading mb-2">Upload your media</h1>

@if (isUploading)
{
    <div class="row justify-content-center mt-2">
        <MatCard class="demo-mat-card">
            <MatCardContent>
                <div class="demo-mat-card-content">
                    <MatHeadline6 class="demo-mat-card-clean-margin text-center">
                        Uploading @media.Title...
                    </MatHeadline6>
                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                        <p>We are currently uploading your media.</p>
                        <p>Please remain patient.</p>
                    </MatSubtitle2>
                </div>
                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                    <h3 class="mat-subtitle1">Uploading...</h3>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                </MatBody2>
            </MatCardContent>
        </MatCard>
    </div>
}

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12">
        <MatCard Class="p-5">
           <MatCardContent>
                @if (string.IsNullOrWhiteSpace(thumbnailPath))
                {
                    <MatCardMedia Wide="true" ImageUrl="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." />
                }
                else
                {
                    <MatCardMedia Wide="true" ImageUrl="@thumbnailPath" />
                }
                <EditForm Model="media" OnValidSubmit="CreateMedia">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <InputFile OnChange="LoadThumbnailFile" class="form-control" accept="image/*"/>
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <MatStringField @bind-Value="media.Title" Label="Title" 
                                    Required="true" Type="text" FullWidth="true"
                                    HelperText="Briefly describe your media's title." 
                                    HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <MatStringField @bind-Value="media.Description" Label="Description" 
                                    Required="true" Type="text" FullWidth="true"
                                    HelperText="Explain what your media is about, its content or otherwise." 
                                    HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <label for="media-file" class="form-label">Choose your file to upload.</label>
                                <div id="file-help" class="form-text">Select the file you would like to upload.</div>
                                <InputFile OnChange="LoadMediaFile" class="form-control" accept="audio/*,video/*,.mkv"/>
                            </div>
                            <div class="mb-3">
                                <label for="media-genre" class="form-label">Genres</label>
                                <div id="genre-help" class="form-text">Select a genre which best suits your media.</div>
                                @if (genres is not null)
                                {
                                    <MatSelectValue @bind-Value="media.GenreId" Items="genres"
                                        ValueSelector="@(i=>i.Id)" Context="g" FullWidth="true">
                                        <ItemTemplate>
                                            <span>@g.GenreName</span>
                                        </ItemTemplate>
                                    </MatSelectValue> 
                                }
                                <p>
                                    Selected Genre: @GetGenreName()
                                </p>
                            </div>
                            <div class="center-children">
                                <MatButton Raised Class="bg-secondary mx-2" Type="submit">
                                    Upload
                                </MatButton>
                            </div>
                        </div>
                    </div>
                </EditForm>
           </MatCardContent>
        </MatCard>           
    </div>
</div>

            @code {
    private CreateMediaFileModel media = new();
    private List<GenreModel> genres;
    private string errorMessage = "";
    private string thumbnailPath = "";
    private bool isUploading = false;
    private long maxFileSizeThumbnail = 1024 * 1024 * 10; // represents 10MB
    private long maxFileSizeMedia = 1024 * 1024 * 1000; // represents 1000MB
    private IBrowserFile thumbnailFile;
    private IBrowserFile mediaFile;

    protected override async Task OnInitializedAsync()
    {
        genres = await genreEndpoint.GetAllAsync();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task OpenUploadAlert()
    {
        await matDialogService.AlertAsync("Remain patient, we are uploading your media! Do not leave the page.");
        return;
    }

    private async Task OpenErrorAlert()
    {
        await matDialogService.AlertAsync(errorMessage);
    }

    private async Task LoadThumbnailFile(InputFileChangeEventArgs e)
    {
        thumbnailFile = e.File;
        using var stream = thumbnailFile.OpenReadStream(maxFileSizeThumbnail);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        string base64Image = $"data:{thumbnailFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
        thumbnailPath = base64Image;
    }

    private void LoadMediaFile(InputFileChangeEventArgs e)
    {
        mediaFile = e.File;
    }

    private async Task CreateMedia()
    {
        if (await CanUpload() is false)
            return;

        isUploading = true;
        string thumbnailFileId = "";
        string mediaFileId = "";

        await OpenUploadAlert();
        if (thumbnailFile is not null)
        {
            thumbnailFileId = await fileProcessor.CompressAndStoreImageAsync(thumbnailFile);
        }

        using (var mediaStream = mediaFile.OpenReadStream(maxFileSizeMedia))
        {
            mediaFileId = await fileStorage.StoreFileAsync(mediaStream, mediaFile.Name);
            await mediaStream.DisposeAsync();
        }

        MediaFileModel m = new()
        {
            Title = media.Title,
            Description = media.Description,
            ThumbnailPath = thumbnailFileId,
            FilePath = mediaFileId,
            Genre = genres.FirstOrDefault(g => g.Id == media.GenreId),
            Author = new BasicUserModel(loggedInUser),
        };

        await mediaFileEndpoint.CreateMediaFileAsync(m);
        media = new();
        isUploading = false;
        thumbnailFile = null;
        mediaFile = null;
        ClosePage();
    }

    private string GetGenreName()
    {
        if (string.IsNullOrWhiteSpace(media.GenreId) is false)
        {
            var g = genres.FirstOrDefault(g => g.Id == media.GenreId);
            return g.GenreName;
        }

        return "";
    }

    private async Task<bool> CanUpload()
    {
        errorMessage = "";
        if (mediaFile is null)
        {
            errorMessage = "You didn't choose a media to upload.";
            await OpenErrorAlert();
            return false;
        }

        if (mediaFile.Size > maxFileSizeMedia)
        {
            errorMessage = "Your file surpasses the maximum upload size.";
            await OpenErrorAlert();
            return false;
        }

        if (thumbnailFile.Size > maxFileSizeThumbnail)
        {
            errorMessage = "Your thumbnail file surpasses the maximum upload size";
            await OpenErrorAlert();
            return false;
        }

        if (genres.FirstOrDefault(g => g.Id == media.GenreId) is null)
        {
            errorMessage = "Your selected genre is currently unavailable.";
            media.GenreId = "";
            await OpenErrorAlert();
            return false;
        }

        return true;
    }
}
