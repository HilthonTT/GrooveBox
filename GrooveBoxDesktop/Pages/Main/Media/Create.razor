@page "/Create"
@using System.Diagnostics;
@attribute [Authorize]
@inject ILoggedInUserModel loggedInUser
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IGenreEndpoint genreEndpoint
@inject IFileStorage fileStorage
@inject IJSRuntime JSInterop
@inject IMatDialogService matDialogService
@inject NavigationManager navManager

<h1 class="page-heading mb-2">Upload your media</h1>

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12">
        <MatCard Class="p-5">
            <EditForm Model="media" OnValidSubmit="CreateMedia">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-12">
                        <div class="text-center mb-3">
                            @if (string.IsNullOrWhiteSpace(thumbnailPath))
                            {
                                <img class="rounded rounded-3" src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                                    style="width: 300px; height: 300px;"/>
                            }
                            else
                            {
                                <img class="rounded rounded-3" src="@thumbnailPath" style="width: 300px; height: 300px;"/>
                            }
                        </div>
                        <InputFile OnChange="LoadThumbnailFile" class="form-control" accept="image/*"/>
                    </div>       
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="mb-3">
                            <MatStringField @bind-Value="media.Title" Label="Title" 
                                Required="true" Type="text" FullWidth="true"
                                HelperText="Briefly describe your media's title." HelperTextPersistent="true"/>
                        </div>
                        <div class="mb-3">
                            <MatStringField @bind-Value="media.Description" Label="Description" 
                                Required="true" Type="text" FullWidth="true"
                                HelperText="Explain what your media is about, its content or otherwise." HelperTextPersistent="true"/>
                        </div>
                        <div class="mb-3">
                            <label for="media-file" class="form-label">Choose your file to upload.</label>
                            <div id="file-help" class="form-text">Select the file you would like to upload.</div>
                            <InputFile OnChange="LoadMediaFile" class="form-control" accept="audio/*,video/*,.mkv"/>
                        </div>
                        <div class="mb-3">
                            <label for="media-genre" class="form-label">Genres</label>
                            <div id="genre-help" class="form-text">Select a genre which best suits your media.</div>
                            @if (genres is not null)
                            {
                                <MatSelectValue @bind-Value="media.GenreId" Items="genres"
                                    ValueSelector="@(i=>i.Id)" Context="g" FullWidth="true">
                                    <ItemTemplate>
                                        <span>@g.GenreName</span>
                                    </ItemTemplate>
                                </MatSelectValue> 
                            }
                            <p>
                                Selected Genre: @GetGenreName()
                            </p>
                        </div>
                        <div class="center-children">
                           <MatButton Raised Class="bg-secondary mx-2" Type="submit">
                                Upload
                            </MatButton>
                        </div>
                    </div>
                </div>
            </EditForm>
        </MatCard>           
    </div>
</div>


@code {
    private CreateMediaFileModel media = new();
    private List<GenreModel> genres;
    private string thumbnailPath = "";
    private long maxFileSizeThumbnail = 1024 * 1024 * 5; // represents 5MB
    private long maxFileSizeMedia = 1024 * 1024 * 1000; // represents 1000MB
    private IBrowserFile thumbnailFile;
    private IBrowserFile mediaFile;

    protected override async Task OnInitializedAsync()
    {
        genres = await genreEndpoint.GetAllAsync();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task OpenAlertFromService()
    {
        await matDialogService.AlertAsync("Remain patient, we are uploading your media! Do not leave the page.");
    }

    private async Task LoadThumbnailFile(InputFileChangeEventArgs e)
    {
        thumbnailFile = e.File;
        using var stream = thumbnailFile.OpenReadStream(maxFileSizeThumbnail);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        string base64Image = $"data:{thumbnailFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
        thumbnailPath = base64Image;
    }

    private void LoadMediaFile(InputFileChangeEventArgs e)
    {
        mediaFile = e.File;
    }

    private async Task CreateMedia()
    {
        if (mediaFile is null || mediaFile?.Size > maxFileSizeMedia || thumbnailFile?.Size > maxFileSizeThumbnail)
        {
            // Handle null or oversized thumbnail file
            return;
        }

        using Stream thumbnailStream = thumbnailFile.OpenReadStream(maxFileSizeThumbnail);
        string thumbnailFileId = await fileStorage.StoreFileAsync(thumbnailStream, thumbnailFile.Name);

        if (thumbnailFile is null)
        {
            thumbnailStream.Dispose();
            return;
        }

        using Stream mediaStream = mediaFile.OpenReadStream(maxFileSizeMedia);
        string mediaFileId = await fileStorage.StoreFileAsync(mediaStream, mediaFile.Name);

        await mediaStream.DisposeAsync();
        await thumbnailStream.DisposeAsync();

        MediaFileModel m = new()
        {
            Title = media.Title,
            Description = media.Description,
            ThumbnailPath = thumbnailFileId,
            FilePath = mediaFileId,
            Genre = genres.FirstOrDefault(g => g.Id == media.GenreId),
            Author = new BasicUserModel(loggedInUser),
        };

        if (m.Genre is null)
        {
            media.GenreId = "";
            return;
        }

        await mediaFileEndpoint.CreateMediaFileAsync(m);
        media = new();
        ClosePage();
    }

    private string GetGenreName()
    {
        if (string.IsNullOrWhiteSpace(media.GenreId) is false)
        {
            var g = genres.FirstOrDefault(g => g.Id == media.GenreId);
            return g.GenreName;
        }

        return "";
    }
}
