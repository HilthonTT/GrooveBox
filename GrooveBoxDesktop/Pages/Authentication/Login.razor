@page "/Login"
@inject IAuthenticationService authService
@inject NavigationManager navManager
@attribute [AllowAnonymous]

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<h1>Login</h1>

<div>
    <div>
        <div>
            <div>
                <EditForm Model="user" OnValidSubmit="ExecuteLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">Email Address</label>
                        <div>Enter your email address to gain access to your account.</div>
                        <InputText class="form-control" @bind-Value="user.Email" placeholder="Email Address"/>
                    </div>
                    <div>
                        <label class="form-label">Password</label>
                        <div>Enter your password to gain access to your account.</div>
                        <InputText type="password" class="form-control" @bind-Value="user.Password" placeholder="Password"/>
                    </div>
                    <div>
                        <button type="submit">Login</button>
                    </div>
                    <div>
                        <label>Don't have an account?</label>
                        <button type="button" @onclick="LoadRegisterPage">Register</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private AuthenticationUserModel user = new();
    private string errorMessage = "";

    private async Task ExecuteLogin()
    {
        errorMessage = "";
        AuthenticatedUserModel result = await authService.Login(user);
        if (result is not null)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "There was an error trying to log in.";
        }
    }

    private void LoadRegisterPage()
    {
        navManager.NavigateTo("/register");
    }
}
