@page "/Register"
@inject IUserEndpoint userEndpoint
@inject IOidGenerator oidGenerator
@inject IAuthenticationService authService
@inject IFileStorage fileStorage
@inject NavigationManager navManager
@attribute [AllowAnonymous]

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<h1 class="page-heading mb-2">Register</h1>

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12">
        <div class="row">
            <div class="col-12">
                @if (string.IsNullOrWhiteSpace(filePath))
                {
                    <img id="image-container" src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                        class="img-fluid rounded-circle mx-auto d-block mb-2" alt="Stock Image" 
                        style="height: 200px; width: 200px;"/>
                }
                else
                {
                    <img id="image-container" src="@filePath" 
                        class="img-fluid rounded-circle mx-auto d-block mb-2" alt="Profile Picture" 
                        style="height: 200px; width: 200px;"/>
                }
                <InputFile OnChange="LoadFile" class="form-control" accept="image/*"/>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <EditForm Model="user" OnValidSubmit="RegisterAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="first-name" class="form-label">First Name</label>
                        <div id="first-name-help" class="form-text">Enter your first name.</div>
                        <InputText class="form-control" id="first-name" placeholder="First Name" 
                         aria-describedby="first-name-help" @bind-Value="user.FirstName"/>
                    </div>
                    <div class="mb-3">
                        <label for="last-name" class="form-label">Last Name</label>
                        <div id="last-name-help" class="form-text">Enter your last name.</div>
                        <InputText class="form-control" id="last-name" placeholder="Last Name"
                            aria-describedby="last-name-help" @bind-Value="user.LastName" />
                    </div>
                    <div class="mb-3">
                        <label for="display-name" class="form-label">Display Name</label>
                        <div id="display-name-help" class="form-text">
                            Enter your display name. It doesn't have to be your real name.
                        </div>
                        <InputText class="form-control" id="display-name" placeholder="Display Name"
                            aria-describedby="display-name-help" @bind-Value="user.DisplayName" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <div id="email-help" class="form-text">Enter your email address.</div>
                        <InputText class="form-control" id="email" placeholder="Email"
                            aria-describedby="email-help" @bind-Value="user.EmailAddress" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <div id="password-help" class="form-text">
                            Enter your password. It must contain a special character.
                        </div>
                        <InputText class="form-control" type="password" id="password" placeholder="At least 6 characters"
                            aria-describedby="password-help" @bind-Value="user.Password" />
                    </div>
                    <div class="mb-3">
                        <label for="confirm-password" class="form-label">Confirm Password</label>
                        <div id="confirm-password-help" class="form-text">
                            Repeat the password you've previously entered.
                        </div>
                        <InputText class="form-control" type="password" id="confirm-password" placeholder="Confirm Password"
                            aria-describedby="confirm-password-help" @bind-Value="user.ConfirmPassword" />
                    </div>
                    <div class="center-children">
                        <button class="btn btn-primary" type="submit">
                            Register
                        </button>
                    </div>
                    <div class="center-children">
                        <label class="form-label">Already have an account?</label>
                    </div>
                    <div class="center-children">
                        <button type="button" class="btn btn-secondary" @onclick="LoadLoginPage">
                            Login
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    CreateUserModel user = new();
    private string errorMessage = "";
    private string filePath = "";
    private long maxFileSize = 1024 * 1024 * 5; // represents 5MB
    private IBrowserFile file;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
        using var stream = file.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        string base64Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(bytes)}";
        filePath = base64Image;
    }

    private void LoadLoginPage()
    {
        navManager.NavigateTo("/login");
    }

    private async Task RegisterAsync()
    {
        try
        {
            errorMessage = "";

            using Stream fileStream = file.OpenReadStream(maxFileSize);
            var fileId = await fileStorage.StoreFileAsync(fileStream, file.Name);

            await fileStream.DisposeAsync();

            string objectId = await oidGenerator.GenerateOidAsync();
            UserModel u = new()
            {
                ObjectIdentifier = objectId,
                FirstName = user.FirstName,
                LastName = user.LastName,
                DisplayName = user.DisplayName,
                EmailAddress = user.EmailAddress,
                FileName = fileId.ToString() ?? "",
            };
            user.ObjectIdentifier = objectId;

            await userEndpoint.CreateUserAsync(user);;
            AuthenticatedUserModel result = await authService.Login(new() { Email = user.EmailAddress, Password = user.Password });
            if (result is not null)
            {
                navManager.NavigateTo("/");
                return;
            }

            errorMessage = "You've successfully registered but there was an error trying to log you in.";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
