@page "/Register"
@inject IUserEndpoint userEndpoint
@inject IOidGenerator oidGenerator
@inject IAuthenticationService authService
@inject IFileStorage fileStorage
@inject IMatDialogService matDialogService
@inject NavigationManager navManager
@attribute [AllowAnonymous]

<div class="row justify-content-center">
    <div class="col-xl-10 col-lg-12">
        <div class="row">
            <div class="col-12">
                <MatCard Class="p-5">
                    <MatH5 Class="text-center text-uppercase">Register</MatH5>
                    <MatCardContent>
                        <EditForm Model="user" OnValidSubmit="RegisterAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                 <MatStringField @bind-Value="user.FirstName" Label="First Name" 
                                    Required="true" Type="text" FullWidth="true"
                                    HelperText="Enter your first name." HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <MatStringField @bind-Value="user.LastName" Label="Last Name" 
                                    Required="true" Type="text" FullWidth="true"
                                    HelperText="Enter your last name." HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <MatStringField @bind-Value="user.DisplayName" Label="Display Name" 
                                    Required="true" Type="text" FullWidth="true"
                                    HelperText="Enter your display name." HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                               <MatStringField @bind-Value="user.EmailAddress" Label="Email Address" 
                                    Required="true" Type="email" FullWidth="true"
                                    HelperText="Enter your email address." HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <MatStringField @bind-Value="user.Password" Label="Password" 
                                    Required="true" Type="password" FullWidth="true"
                                    HelperText="Enter a strong password." HelperTextPersistent="true"/>
                            </div>
                            <div class="mb-3">
                                <MatStringField @bind-Value="user.ConfirmPassword" Label="Confirm Password" 
                                    Required="true" Type="password" FullWidth="true"
                                    HelperText="Enter your password again to confirm it." HelperTextPersistent="true"/>
                            </div>
                            <div class="center-children">
                                <MatButton Raised Class="bg-secondary mx-2" Type="submit">
                                    Register
                                </MatButton>
                                <MatButton Raised Class="bg-secondary" Type="button" @onclick="LoadLoginPage">
                                    Login
                                </MatButton>
                            </div>
                        </EditForm>
                    </MatCardContent>
                </MatCard>
            </div>
        </div>
    </div>
</div>


@code {
    CreateUserModel user = new();
    private string errorMessage = "";

    private void LoadLoginPage()
    {
        navManager.NavigateTo("/login");
    }

    private async Task OpenAlertFromService()
    {
        await matDialogService.AlertAsync(errorMessage);
    }

    private async Task RegisterAsync()
    {
        try
        {
            errorMessage = "";

            string objectId = await oidGenerator.GenerateOidAsync();
            UserModel u = new()
            {
                ObjectIdentifier = objectId,
                FirstName = user.FirstName,
                LastName = user.LastName,
                DisplayName = user.DisplayName,
                EmailAddress = user.EmailAddress,
                FileName = "",
            };
            user.ObjectIdentifier = objectId;

            await userEndpoint.CreateUserAsync(user);;
            AuthenticatedUserModel result = await authService.Login(new() { Email = user.EmailAddress, Password = user.Password });
            if (result is not null)
            {
                navManager.NavigateTo("/");
            }
            else
            {  
                errorMessage = "Registration successfull but login failed.";
                await OpenAlertFromService();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
