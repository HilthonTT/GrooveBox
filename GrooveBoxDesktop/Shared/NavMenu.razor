@inject ILoggedInUserModel loggedInUser
@inject IGenreData genreData
@inject NavigationManager navManager

<div class="d-flex flex-column flex-shrink-0 p-3 text-white bg-dark h-100">
    <a class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
        <svg class="bi me-2" width="40" height="32"><use xlink:href="#bootstrap"></use></svg>
        <span class="fs-4">Groove Box</span>
    </a>
    <hr class="navbar-hr">
    <ul class="nav nav-pills flex-column mb-0">
        <li class="nav-item">
            <a href="/" class="nav-link active" aria-current="page">
                <svg class="bi me-2" width="16" height="16"><use xlink:href="/"></use></svg>
                <span class="oi oi-home"></span>Home
            </a>
        </li>
        <li class="nav-item">
            <a href="/Subscriptions" class="nav-link active">
                <svg class="bi me-2" width="16" height="16"><use xlink:href="/Subscriptions"></use></svg>
                <span class="oi oi-book"></span>Subscriptions
            </a>
        </li>
        <li class="nav-item">
            <a href="/YourVideos" class="nav-link active" aria-current="page">
                <svg class="bi me-2" width="16" height="16"><use xlink:href="/YourVideos"></use></svg>
                <span class="oi oi-video"></span>Your videos
            </a>
        </li>
    </ul>
    <hr class="navbar-hr" />
    <div class="text-uppercase fw-bold">Subscriptions</div>
    <ul class="nav nav-pills flex-column mb-0">
        @if (loggedInUser?.SubscribedAuthors != null && loggedInUser.SubscribedAuthors.Any())
        {      
            <Virtualize Items="GetVisibleAuthors()" Context="a" OverscanCount="3">
                <li class="nav-item custom-pointer" @onclick="(() => LoadAuthorProfilePage(a))">
                    <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available."
                            alt="@a.FileName"
                            class="rounded-circle me-2"
                            width="32"
                            height="32">
                    </li>
            </Virtualize>     
            @if (loggedInUser.SubscribedAuthors.Count() > 3)
            {
                <button @onclick="ShowAllAuthors">
                    Show @GetUserSubscriptionCount() More
                </button>
            }
        }
    </ul>
    <hr class="navbar-hr"/>
    <div class="text-uppercase fw-bold">Explore</div>
    <ul class="nav nav-pills flex-column mb-auto">
        @if (genres is not null)
        {
            <Virtualize Items="genres" Context="g" OverscanCount="5">
                <li class="nav-item custom-pointer" @onclick="(() => LoadGenreMedia(g))">
                    <a href="#" class="nav-link active" aria-current="page">
                        <svg class="bi me-2" width="16" height="16"><use xlink:href="#"></use></svg>
                        <span class="oi @GetGenreIconClass(g)"></span>@g.GenreName
                    </a>
                </li>
            </Virtualize>
        }
    </ul>
    <hr class="navbar-hr" />
    <div class="dropdown">
        <a href="#" 
            class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" 
            id="user-dropdown" 
            data-bs-toggle="dropdown" 
            aria-expanded="false">
        @if (string.IsNullOrWhiteSpace(loggedInUser.FileName) is false)
        {
            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                alt="@loggedInUser.FileName" 
                class="rounded-circle me-2" 
                width="32" 
                height="32">
        }
        else
        {
            <img src="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                class="rounded-circle me-2"
                alt="Placeholder Image"
                width="32" 
                height="32">
        }     
        <strong>@loggedInUser.DisplayName</strong>
        </a>
        <ul class="dropdown-menu dropdown-menu-dark text-small shadow" aria-labelledby="user-dropdown">
        <li><a class="dropdown-item" href="/Studio">Studio</a></li>
        <li><a class="dropdown-item" href="/Settings">Settings</a></li>
        <li><a class="dropdown-item" href="/Profile">Profile</a></li>
        <li><hr class="dropdown-divider"></li>
        <AuthorizeView>
            <Authorized>
                <li><a class="dropdown-item" href="/LogOut">Log out</a></li>
            </Authorized>
            <NotAuthorized>
                <li><a class="dropdown-item" href="/Login">Log in</a></li>
            </NotAuthorized>
        </AuthorizeView>
        </ul>
    </div>
</div>

@code {
    private bool showAllAuthors = false;
    private List<GenreModel> genres;

    protected override async Task OnInitializedAsync()
    {
        genres = await genreData.GetAllGenresAsync();
    }

    private List<BasicUserModel> GetVisibleAuthors()
    {
        if (showAllAuthors)
        {
            return loggedInUser.SubscribedAuthors;
        }
        else
        {
            return loggedInUser.SubscribedAuthors.Take(3).ToList();
        }
    }

    private void ShowAllAuthors()
    {
        showAllAuthors = true;
    }

    private string GetUserSubscriptionCount()
    {
        return loggedInUser.SubscribedAuthors.Count.ToString();
    }

    private void LoadGenreMedia(GenreModel genre)
    {
        navManager.NavigateTo($"/{genre.GenreName}");
    }

    private void LoadAuthorProfilePage(BasicUserModel author)
    {
        navManager.NavigateTo($"/UserDetails/{author.Id}");
    }

    private string GetGenreIconClass(GenreModel genre)
    {
        if (genre.GenreName == "Music")
        {
            return "oi-musical-note";
        }

        if (genre.GenreName == "Gaming")
        {
            return "oi-bug";
        }

        if (genre.GenreName == "News")
        {
            return "oi-paperclip";
        }

        if (genre.GenreName == "Sports")
        {
            return "oi-badge";
        }

        return "oi-question-mark";
    }
}