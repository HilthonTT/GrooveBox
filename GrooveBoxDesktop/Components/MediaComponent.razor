@inject NavigationManager navManager
@inject IMediaFileEndpoint mediaFileEndpoint
@inject IUserEndpoint userEndpoint
@inject IFileStorage fileStorage
@inject ILoggedInUserModel loggedInUser
@inject IJSRuntime JSInterop

<div class="col-xl-4 col-lg-6 mb-2">
    <MatCard class="demo-mat-card">
        <div class="demo-mat-card-content">
            <MatHeadline6 class="demo-mat-card-clean-margin">
                @Media.Title
            </MatHeadline6>
            <MatSubtitle2 class="demo-mat-card-clean-margin">
                by @Media.Author.DisplayName
            </MatSubtitle2>
        </div>
        <MatCardContent>
            @if (string.IsNullOrWhiteSpace(sourcePath))
            {
                <MatCardMedia Wide="true" ImageUrl="https://dummyimage.com/1200x900/000/ffffff&text=No+image+available." 
                    @onclick="LoadMediaPage"/>
            }
            else
            {
                <MatCardMedia Wide="true" ImageUrl="@sourcePath" 
                    @onclick="LoadMediaPage" />
            }
            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin truncated-title">
                @Media.Description
            </MatBody2>
            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                <MatButton @onclick="LoadGenrePage">@Media.Genre.GenreName</MatButton>
            </MatBody2>
        </MatCardContent>
        <MatCardActions>
            <MatCardActionButtons>
                <MatButton @onclick="LoadMediaPage">Play</MatButton>
                @if (loggedInUser.Id != Media.Author.Id)
                {
                    <MatButton Class="@GetSubscribeColor()" @onclick="Subscribe">Subscribe</MatButton>
                }
                else
                {
                    <MatButton @onclick="LoadEditPage">Edit</MatButton>
                }
            </MatCardActionButtons>
            <MatCardActionIcons>
                <MatIconButton Class="@GetVoteColor()" Icon="@MatIconNames.Favorite" @onclick="VoteUp"></MatIconButton>
                <MatIconButton Icon="@MatIconNames.Dashboard"></MatIconButton>
            </MatCardActionIcons>
        </MatCardActions>
    </MatCard>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public MediaFileModel Media { get; set; }

    private UserModel author;
    private string sourcePath = "";
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        sourcePath = await fileStorage.CreateSourcePath(Media.ThumbnailPath);
        author = await userEndpoint.GetByObjectIdAsync(Media.Author.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSInterop.InvokeVoidAsync("initializeTooltips");
            StateHasChanged();
        }
    }

    private async Task Subscribe()
    {
        if (isBusy || author is null || author.Id == loggedInUser.Id)
        {
            return;
        }

        isBusy = true;

        if (author.UserSubscriptions.Add(loggedInUser.Id) is false)
        {
            author.UserSubscriptions.Remove(loggedInUser.Id);
        }

        await userEndpoint.UpdateUserSubscriptionAsync(author.Id, loggedInUser.Id);
        isBusy = false;
    }

    private async Task VoteUp()
    {
        if (isBusy)
        {
            return;
        }

        isBusy = true;
        if (string.IsNullOrWhiteSpace(loggedInUser.Id))
        {
            navManager.NavigateTo("/Login");
            return;
        }

        if (Media.UserVotes.Add(loggedInUser.Id) is false)
        {
            Media.UserVotes.Remove(loggedInUser.Id);
        }

        await mediaFileEndpoint.UpdateVoteMediaFileAsync(Media.Id, loggedInUser.Id);
        isBusy = false;
    }

    private void LoadMediaPage()
    {
        navManager.NavigateTo($"MediaDetails/{Media.Id}");
    }

    private void LoadGenrePage()
    {
        navManager.NavigateTo($"Genre/{Media.Genre.GenreName}");
    }

    private void LoadEditPage()
    {
        navManager.NavigateTo($"/MediaEdit/{Media.Id}");
    }

    private string GetSubscribeColor()
    {
        if (author is not null && author.UserSubscriptions.Contains(loggedInUser.Id))
        {
            return "text-danger";
        }

        return "text-success";
    }

    private string GetVoteColor()
    {
        if (Media.UserVotes.Contains(loggedInUser.Id))
        {
            return "text-success";
        }

        return "";
    }
}
